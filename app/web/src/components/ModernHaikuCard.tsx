import React, { useRef, useState } from 'react';
import type { Haiku, HaikuOptions } from '../utils/generator';
import { buildTweetText } from '../utils/social';

// Lazy load html-to-image only when needed
const loadHtmlToImage = () => import('html-to-image');

interface ModernHaikuCardProps {
  haiku: Haiku;
  options: HaikuOptions;
  hashtags: string[];
  onRemoveHashtag: (tag: string) => void;
}

const ModernHaikuCard: React.FC<ModernHaikuCardProps> = ({ 
  haiku, 
  options, 
  hashtags, 
  onRemoveHashtag 
}) => {
  const cardRef = useRef<HTMLDivElement>(null);
  const [isSharing, setIsSharing] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);

  const handleCopy = async () => {
    const textToCopy = `${haiku.line1}\n${haiku.line2}\n${haiku.line3}\n\n${hashtags.join(' ')}\n\nGenerated by Wrestling Circle Jerks Haiku Forge ðŸ¥Š`;
    
    try {
      await navigator.clipboard.writeText(textToCopy);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const handleSavePng = async () => {
    if (!cardRef.current) return;
    
    setIsSharing(true);
    try {
      // Lazy load the heavy html-to-image library
      const { toPng } = await loadHtmlToImage();
      
      const dataUrl = await toPng(cardRef.current, { 
        cacheBust: true,
        backgroundColor: '#0F172A',
        width: 600,
        height: 600,
        style: {
          transform: 'scale(1)',
          transformOrigin: 'top left',
        }
      });
      
      const link = document.createElement('a');
      link.download = `wrestling-haiku-${haiku.seed}.png`;
      link.href = dataUrl;
      link.click();
    } catch (err) {
      console.error('Failed to generate image:', err);
    }
    setIsSharing(false);
  };

  const handleShareX = () => {
    const tweetText = buildTweetText(haiku, options, hashtags, 'full');
    const tweetUrl = `https://x.com/intent/tweet?text=${encodeURIComponent(tweetText)}`;
    window.open(tweetUrl, '_blank', 'noopener,noreferrer');
  };

  const handleNativeShare = async () => {
    const shareText = `${haiku.line1}\n${haiku.line2}\n${haiku.line3}\n\n${hashtags.join(' ')}\n\nGenerated by Wrestling Circle Jerks Haiku Forge ðŸ¥Š`;
    
    if (typeof navigator !== 'undefined' && 'share' in navigator) {
      try {
        await navigator.share({
          title: 'Wrestling Haiku',
          text: shareText,
          url: window.location.href,
        });
      } catch (err) {
        console.error('Native share failed:', err);
        handleCopy();
      }
    } else {
      handleCopy();
    }
  };

  return (
    <div className="w-full max-w-md mx-auto space-y-6 animate-slide-up">
      {/* Haiku Display Card */}
      <div 
        ref={cardRef}
        className="glass-card rounded-2xl p-8 text-center relative overflow-hidden"
      >
        {/* Subtle gradient background */}
        <div className="absolute inset-0 bg-gradient-to-br from-red-600/10 via-transparent to-amber-500/10 pointer-events-none" />
        
        <div className="relative z-10">
          {/* Header */}
          <div className="mb-8">
            <h3 className="text-amber-400 font-bold text-sm uppercase tracking-wider mb-2">
              Wrestling Circle Jerks
            </h3>
            <div className="h-0.5 w-12 bg-gradient-to-r from-red-600 to-amber-500 mx-auto rounded-full" />
          </div>

          {/* Haiku Lines */}
          <div className="space-y-3 mb-8">
            <p className="haiku-line text-slate-100 leading-relaxed">
              {haiku.line1}
            </p>
            <p className="haiku-line text-slate-100 leading-relaxed">
              {haiku.line2}
            </p>
            <p className="haiku-line text-slate-100 leading-relaxed">
              {haiku.line3}
            </p>
          </div>

          {/* Seed */}
          <div className="text-slate-500 text-sm font-mono">
            #{haiku.seed}
          </div>
        </div>
      </div>

      {/* Hashtags */}
      {hashtags.length > 0 && (
        <div className="glass-card rounded-xl p-4">
          <h4 className="text-slate-300 text-sm font-medium mb-3">Hashtags</h4>
          <div className="flex flex-wrap gap-2">
            {hashtags.map((tag, index) => (
              <span 
                key={index} 
                className="inline-flex items-center gap-1 bg-slate-700/50 text-slate-300 text-sm px-3 py-1 rounded-full"
              >
                {tag}
                <button 
                  onClick={() => onRemoveHashtag(tag)}
                  className="text-slate-400 hover:text-red-400 transition-colors ml-1"
                  aria-label={`Remove ${tag} hashtag`}
                >
                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="grid grid-cols-2 gap-3">
        {/* Copy Button */}
        <button
          onClick={handleCopy}
          disabled={copySuccess}
          className={`flex items-center justify-center gap-2 py-4 px-4 rounded-xl font-medium transition-all active:scale-95 min-h-[52px] touch-manipulation ${
            copySuccess 
              ? 'bg-green-600 text-white' 
              : 'glass-card text-slate-300 hover:bg-slate-700/50'
          }`}
          style={{ minHeight: '52px', minWidth: '44px' }}
        >
          {copySuccess ? (
            <>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              Copied!
            </>
          ) : (
            <>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              Copy
            </>
          )}
        </button>

        {/* Native Share / X Button */}
        <button
          onClick={typeof navigator !== 'undefined' && 'share' in navigator ? handleNativeShare : handleShareX}
          className="flex items-center justify-center gap-2 py-4 px-4 glass-card text-slate-300 hover:bg-slate-700/50 rounded-xl font-medium transition-all active:scale-95 min-h-[52px] touch-manipulation"
          style={{ minHeight: '52px', minWidth: '44px' }}
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
          </svg>
          Share
        </button>
      </div>

      {/* Additional Actions */}
      <div className="flex gap-3">
        {/* Save as PNG */}
        <button
          onClick={handleSavePng}
          disabled={isSharing}
          className="flex-1 flex items-center justify-center gap-2 py-3 px-4 btn-secondary rounded-xl font-medium text-slate-900 transition-all disabled:opacity-50 active:scale-95 min-h-[48px] touch-manipulation"
          style={{ minHeight: '48px', minWidth: '44px' }}
        >
          {isSharing ? (
            <>
              <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Saving...
            </>
          ) : (
            <>
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Save PNG
            </>
          )}
        </button>

        {/* Share to X specifically */}
        <button
          onClick={handleShareX}
          className="flex items-center justify-center gap-2 py-3 px-4 glass-card text-slate-300 hover:bg-slate-700/50 rounded-xl font-medium transition-all min-w-[80px] active:scale-95 min-h-[48px] touch-manipulation"
          style={{ minHeight: '48px', minWidth: '80px' }}
        >
          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
            <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
          </svg>
          Post
        </button>
      </div>
    </div>
  );
};

export default ModernHaikuCard;